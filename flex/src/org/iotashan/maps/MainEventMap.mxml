<?xml version="1.0" encoding="utf-8"?>
<!---
	The MainEventMap class is the brain of the application.
	All incoming and outgoing events are sent through here.
-->
<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import com.asfusion.mate.core.*;
			import com.asfusion.mate.events.UnhandledFaultEvent;
			import org.iotashan.business.*;
			import org.iotashan.events.*;
			import org.iotashan.views.*;
		]]>
	</mx:Script>
	
	<!-- startup event handler -->
	<EventHandlers type="{FlexEvent.INITIALIZE}">
		<!-- init the managers, pass in event dispatcher -->
		<MethodInvoker generator="{UserManager}" constructorArguments="{scope.dispatcher}"/>
	</EventHandlers>
	
	<!-- unhandled faults -->
	<EventHandlers type="{UnhandledFaultEvent.FAULT}">
		<MethodInvoker generator="{ErrorManager}" method="remoteError" arguments="{event.fault}"/>
	</EventHandlers>
	
	<!-- Login/Logout events -->
	<EventHandlers type="{LoginEvent.LOGIN}" debug="false">
		<!-- call the remoting service -->
		<RemoteObjectInvoker source="model.UserGateway" method="tryLogin" destination="ColdFusion" showBusyCursor="true" arguments="{event.user}" debug="false">
			<resultHandlers>
				<!-- Send the result back to the calling code -->
				<MethodInvoker generator="{UserManager}" method="checkLogin" arguments="{resultObject}" constructorArguments="{scope.dispatcher}"/>
			</resultHandlers>
		</RemoteObjectInvoker>
	</EventHandlers>
	
	<EventHandlers type="{LoginEvent.LOGIN_UNSUCCESSFUL}" debug="false">
		<MethodInvoker generator="{Login}" method="loginFailed"/>
	</EventHandlers>
	
	<EventHandlers type="{AccountEvent.ACCOUNT_NOT_ACTIVE}" debug="false">
		<MethodInvoker generator="{Login}" method="accountNotActivated" arguments="{event.user}"/>
	</EventHandlers>
	
	<EventHandlers type="{LoginEvent.LOGOUT}" debug="false">
		<MethodInvoker generator="{UserManager}" method="logout" constructorArguments="{scope.dispatcher}"/>
	</EventHandlers>
	
	<!-- Create Account events -->
	<EventHandlers type="{AccountEvent.CHECK_USERNAME}" debug="false">
		<!-- call the remoting service -->
		<RemoteObjectInvoker source="model.UserGateway" method="isUsernameAvailable" destination="ColdFusion" showBusyCursor="true" arguments="{event.email}" debug="false">
			<resultHandlers>
				<!-- Send the result back to the calling code -->
				<ServiceResponseAnnouncer type="result"/>
			</resultHandlers>
		</RemoteObjectInvoker>
	</EventHandlers>
	
	<EventHandlers type="{AccountEvent.SAVE_ACCOUNT}" debug="false">
		<!-- call the remoting service -->
		<RemoteObjectInvoker source="model.UserGateway" method="save" destination="ColdFusion" showBusyCursor="true" arguments="{event.user}" debug="false">
			<resultHandlers>
				<!-- Send the result back to the calling code -->
				<ServiceResponseAnnouncer type="result"/>
			</resultHandlers>
		</RemoteObjectInvoker>
	</EventHandlers>
	
	<EventHandlers type="{AccountEvent.RESEND_ACTIVATION}" debug="false">
		<!-- call the remoting service -->
		<RemoteObjectInvoker source="model.UserGateway" method="sendRegistrationEmail" destination="ColdFusion" showBusyCursor="true" arguments="{event.user}" debug="false">
			<resultHandlers>
				<!-- Send the result back to the calling code -->
				<ServiceResponseAnnouncer type="result"/>
			</resultHandlers>
		</RemoteObjectInvoker>
	</EventHandlers>
	
	<EventHandlers type="{AccountEvent.ACTIVATE_ACCOUNT}" debug="false">
		<!-- call the remoting service -->
		<RemoteObjectInvoker source="model.UserGateway" method="activateAccount" destination="ColdFusion" showBusyCursor="true" arguments="{event.verificationCode}" debug="false">
			<resultHandlers>
				<!-- Send the result back to the calling code -->
				<CallBack method="accountActivated" arguments="{resultObject}"/>
			</resultHandlers>
		</RemoteObjectInvoker>
	</EventHandlers>
	
</EventMap>
