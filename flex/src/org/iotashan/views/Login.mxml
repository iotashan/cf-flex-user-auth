<?xml version="1.0" encoding="utf-8"?>
<!---
	The Login view is used for logging the user in.
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:mate="http://mate.asfusion.com/" initialize="init()" show="clearPassword()">
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import org.iotashan.events.AccountEvent;
			import org.iotashan.business.ErrorManager;
			import mx.validators.Validator;
			import com.asfusion.mate.events.ResponseEvent;
			import org.iotashan.events.LoginEvent;
			import org.iotashan.vos.User;
			
			[Bindable] private var tmpUser:User;
			[Bindable] private var verificationCode:String;
			
			private function init():void {
				if (Application.application.parameters.v) {
					verificationCode = Application.application.parameters.v;
					activateAccount.generateEvent();
				}
			}
			
			private function doValidation():void {
				// validate the form
				var results:Array = Validator.validateAll(validators);
				
				// if any fields were not valid, do nothing
				if (results.length > 0) {
					return;
				}
				
				tmpUser = new User();
				tmpUser.email = inputEmail.text;
				tmpUser.password = inputPassword.text;
				
				// dispatch the event
				loginDispatcher.generateEvent();
			}
			
			private function tryLogin(val:Object):void {
				var resultUser:User = val as User;
				
				if (resultUser.UserID == 0) {
					// login failed
					inputEmail.errorString = "Login Failed. Please try again.";
					inputEmail.setFocus();
					
					dispatchEvent(new LoginEvent(LoginEvent.LOGIN_UNSUCCESSFUL));
				} else if (resultUser.verificationCode.length > 0) {
					// remove the password
					clearPassword();
					
					// set the result user, so we can resend the activation email in resendActivation()
					tmpUser = resultUser;
					
					Alert.show("Your account has not yet been activated. Do you need the activation email resent?","Error",Alert.YES|Alert.NO,null,resendActivation);
				}else {
					var myEvent:LoginEvent = new LoginEvent(LoginEvent.LOGIN_SUCCESSFUL);
					myEvent.user = resultUser;
					
					dispatchEvent(myEvent);
				}
			}
			
			private function accountActivated(val:Object):void {
				var ret:Boolean = val as Boolean;
				
				if (ret) {
					Alert.show("Your account has been activated. You can now log in.","Account Activated");
				} else {
					Alert.show("This verification code has already been used. You may want to try to logging in.","Error");
				}
			}
			
			private function clearPassword():void {
				inputPassword.text = "";
			}
			
			private function resendActivation(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					// dispatch event
					resendActivationDispatcher.generateEvent();
				} else {
					// do nothing
					return;
				}
			}
			
			private function activationSent():void {
				Alert.show("An activation email has been sent to the email address on file.","Email Sent");
			}
		]]>
	</mx:Script>
	
	<!-- event dispatcher -->
	<mate:Dispatcher id="loginDispatcher" generator="{LoginEvent}" type="{LoginEvent.LOGIN}">
		<mate:eventProperties>
			<mate:EventProperties user="{tmpUser}"/>
		</mate:eventProperties>
		
		<mate:ServiceResponseHandler result="tryLogin(event.result)"/>
	</mate:Dispatcher>
	
	<mate:Dispatcher id="activateAccount" generator="{AccountEvent}" type="{AccountEvent.ACTIVATE_ACCOUNT}">
		<mate:eventProperties>
			<mate:EventProperties verificationCode="{verificationCode}"/>
		</mate:eventProperties>
		
		<mate:ServiceResponseHandler result="accountActivated(event.result)"/>
	</mate:Dispatcher>
	
	<mate:Dispatcher id="resendActivationDispatcher" generator="{AccountEvent}" type="{AccountEvent.RESEND_ACTIVATION}">
		<mate:eventProperties>
			<mate:EventProperties user="{tmpUser}"/>
		</mate:eventProperties>
		
		<mate:ServiceResponseHandler result="activationSent()"/>
	</mate:Dispatcher>
	
	<!-- validators -->
	<mx:Array id="validators">
		<mx:EmailValidator id="vEmail" required="true" source="{inputEmail}" property="text"/>
		<mx:StringValidator id="vPassword" required="true" source="{inputPassword}" property="text"/>
	</mx:Array>
	
	<!-- view -->
	<mx:Panel layout="vertical" horizontalCenter="0" verticalCenter="0" title="Log In">
		<mx:Form width="100%" height="100%" defaultButton="{btnLogin}">
			<mx:FormItem label="Email" required="true" labelWidth="70">
				<mx:TextInput id="inputEmail"/>
			</mx:FormItem>
			<mx:FormItem label="Password" required="true" labelWidth="70">
				<mx:TextInput displayAsPassword="true" id="inputPassword"/>
			</mx:FormItem>
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Spacer width="76" height="10"/>
				<!---
					This button attempts to log a user in.
				-->
				<mx:Button label="Log In" id="btnLogin" click="doValidation()"/>
				<mx:Text text="or"/>
				<!---
					This button switches the user to the CreateAccount screen
				-->
				<mx:LinkButton id="btnCreateAccount" label="Create an Account" click="dispatchEvent(new AccountEvent(AccountEvent.CREATE_ACCOUNT))"/>
			</mx:HBox>
		</mx:Form>
	</mx:Panel>
</mx:Canvas>
